# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AnnouncementModel {
  announcementCharacteristic: [String!]
  categoryId: Float!
  condition: String!
  createdAt: DateTime!
  description: String!
  favourites: [String!]
  id: ID!
  name: String!
  photo: [String!]
  placementDate: DateTime!
  price: Float!
  review: [String!]
  status: String!
  updatedAt: DateTime!
  userId: String!
}

input ChangePasswordInput {
  newPassword: String!
  oldPassword: String!
}

input ChangePhoneNumberInput {
  phoneNumber: String!
}

input CreateAnnouncementInput {
  categoryId: String!
  condition: String!
  description: String!
  name: String!
  placementDate: DateTime!
  price: Float!
  status: String!
}

input CreatePhotoInput {
  announcementID: String!
  link: String!
  name: String!
  resolution: String!
}

input CreateUserInput {
  displayName: String!
  email: String
  password: String!
  phoneNumber: String
  typeProfile: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type DeviceModel {
  browser: String!
  os: String!
  type: String!
}

type LocationModel {
  city: String!
  country: String!
  latidute: Float!
  longitude: Float!
}

input LoginInput {
  login: String!
  password: String!
}

type Mutation {
  addPhotoToAnnouncement(input: CreatePhotoInput!): PhotoModel!
  changeEmail(data: ChangePhoneNumberInput!): Boolean!
  changePassword(data: ChangePasswordInput!): Boolean!
  changeProfileAvatar(avatar: Upload!): Boolean!
  clearSessionCookie: Boolean!
  createAnnouncement(data: CreateAnnouncementInput!): Boolean!
  createUser(data: CreateUserInput!): Boolean!
  deleteAnnouncement(id: String!): Boolean!
  deletePhoto(id: String!): Boolean!
  loginUser(data: LoginInput!): UserModel!
  logoutUser: Boolean!
  removeProfileAvatar: Boolean!
  removeSession(id: String!): Boolean!
  updateAnnouncement(id: String!, input: UpdateAnnouncementInput!): Boolean!
  updatePhoto(id: String!, input: UpdatePhotoInput!): PhotoModel!
}

type PhotoModel {
  announcementID: String!
  id: ID!
  link: String!
  name: String!
  resolution: String!
}

type Query {
  findCurrentSession: SessionModel!
  findProfile: UserModel!
  findSessionsByUser: [SessionModel!]!
  getAnnouncementById(id: String!): AnnouncementModel!
  getAnnouncementsByCategory(categoryId: String!): [AnnouncementModel!]!
  getPhotosByAnnouncementID(announcementID: String!): [PhotoModel!]!
}

type SessionMetadataModel {
  device: DeviceModel!
  ip: String!
  location: LocationModel!
}

type SessionModel {
  createdAt: String!
  id: ID!
  metadata: SessionMetadataModel!
  userId: String!
}

input UpdateAnnouncementInput {
  categoryId: String
  condition: String
  description: String
  name: String
  price: Float
  status: String
}

input UpdatePhotoInput {
  link: String
  name: String
  resolution: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UserModel {
  avatar: String
  bio: String
  createdAt: DateTime!
  displayName: String!
  email: String
  id: ID!
  password: String!
  phoneNumber: String
  rating: Float
  typeProfile: String!
  updatedAt: DateTime!
}